*acid.txt*	Asynchronous Clojure Interactive Development

Author:  hkupty <hkupty@gmail.com>
Version: 1.1
License: 

==============================================================================
CONTENTS					*acid-contents*

INTRODUCTION					|acid-introduction|
FUNCTIONS					|acid-functions|
REMOTE-FUNCTIONS				|acid-remote-functions|
COMMANDS					|acid-command|
DEFAULT MAPPINGS				|acid-mapping|
CONFIGURATIONS					|acid-configuration|

==============================================================================
INTRODUCTION					*acid-introduction*

*Acid.nvim* is a plugin for clojure development on neovim. It was initially
designed within iron.nvim (http://github.com/clojure-vim/iron.nvim),
but evolved to be a proper clojure plugin for neovim.

==============================================================================
FUNCTIONS					*acid-functions*

Here are documented the functions that are defined in viml. Please refer to
*acid-remote-functions* for functions defined in python.


:AcidFnAddRequire(require)			*AcidFnAddRequire()*
	Refactors the current file to include the given require statement.

:AcidMotion(mode)				*AcidMotion()*
	Wrapper for evaluating the given motion on the nrepl.

:AcidInsertEval(namespace)			*AcidInsertEval()*
	Creates a clojure prompt and inserts the result of the evaluation at
	the current cursor position.

==============================================================================
REMOTE-FUNCTIONS				*acid-remote-functions*

:AcidGetNs()					*AcidGetNs()*
	Return the namespace of the current file.

:AcidNewUUID()					*AcidNewUUID()*
	Return a new universaly unique identifier.

:AcidLog(ns, level, message)			*AcidLog()*
	Write a log message into acid's log file.
	  <ns> is the namespace to be logged,
	  <level> is the log level (as described on
	  https://docs.python.org/3/howto/logging.html#when-to-use-logging)
	  <message> is the string message to be logged.

:AcidAlternateFiles([<path>])					*AcidAlternateFiles()*
	Return a list of the possible alternate files for the supplied <path>
	or the current file if none given.

:AcidNewFile(<ns>, [<path>])					*AcidNewFile()*
	Create a new file (if it doesn't exist) and return the path to it.
	If the path is supplied, it will return the same value.
	If no path is supplied, it will be inferred from the namespace.

==============================================================================
COMMANDS					*acid-command*

AcidClearVtext [<linenumber>]			*AcidClearVtext*
	Clears virtualtext on given line number or the entire buffer of no
	line is suppled.

AcidRequire [<require> [<options>]]		*AcidRequire*
	Requires a namespace.
	If no parameters supplied, loads current ns.

	Arguments supplied can be the same as a require vector, taking options:
>
	AcidRequire clojure.string :as str
	AcidRequire clojure.string :refer [join]

AcidAddRequire <require> 			*AcidAddRequire*
	Refactors the current file to add a namespace to current requires.

	Arguments supplied can be the same as a require vector, taking options:
>
	AcidAddRequire clojure.string :as str
	AcidAddRequire clojure.string :refer [join]
<

==============================================================================
DEFAULT MAPPINGS				*acid-mapping*

{key}		{function}
--------	------------------------
K		Shows documentation for the symbol below cursor
<C-]>		Goes to definition of symbol below cursor (`AcidGoto`)
cp<motion>	Sends the block to nrepl for evaluation (`AcidEval`)
cpp		Evaluating the whole block below cursor (`AcidEval`)


==============================================================================
CONFIGURATIONS					*acid-configuration*

g:acid_no_default_keymappings			*acid_no_default_keymappings*
	If it is 1, Acid doesn't set default keymappings.
	You can specify your own keymappings like followings:
>
	let g:acid_no_default_keymappings = 1

	nmap <buffer> <silent> <Leader>K      <Plug>(acid-docs)
	nmap <buffer> <silent> <Leader><C-c>x <Plug>(acid-eval-cmdline)
	imap <buffer> <silent> <Leader><C-c>x <Plug>(acid-eval-cmdline)
	nmap <buffer> <silent> <Leader>cp     <Plug>(acid-motion-op)
	nmap <buffer> <silent> <Leader>cpp    <Plug>(acid-eval-expr)
	nmap <buffer> <silent> <Leader>cqp    <Plug>(acid-eval-print)
<

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
